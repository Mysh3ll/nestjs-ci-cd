version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.0

commands:
  npm-install:
    parameters:
      working-directory:
        type: string
        default: ~/project/backend
    steps:
      - restore_cache:
          key: npm-install-{{ .Environment.CACHE_VERSION }}-{{ checksum "<< parameters.working-directory >>/package.json" }}-{{ checksum "<< parameters.working-directory >>/package-lock.json" }}
          paths:
              - ~/project/<< parameters.working-directory >>/node_modules
      - run:
          name: Install dependencies
          command: npm ci
          working_directory: << parameters.working-directory >>
      - save_cache:
          key: npm-install-{{ .Environment.CACHE_VERSION }}-{{ checksum "<< parameters.working-directory >>/package.json" }}-{{ checksum "<< parameters.working-directory >>/package-lock.json" }}
          paths:
            - << parameters.working-directory >>/node_modules

  lint-check:
    parameters:
      working-directory:
        type: string
        default: .
    steps:
      - restore_cache:
          key: npm-install-{{ .Environment.CACHE_VERSION }}-{{ checksum "<< parameters.working-directory >>/package.json" }}-{{ checksum "<< parameters.working-directory >>/package-lock.json" }}
          paths:
            - << parameters.working-directory >>/node_modules
      - run:
          name: ESLint
          command: npm run lint
          working_directory: << parameters.working-directory >>
      - run:
          name: Prettier
          command: npm run prettier:check
          working_directory: << parameters.working-directory >>

  test-check:
    parameters:
      working-directory:
        type: string
        default: .
    steps:
      - restore_cache:
          key: npm-install-{{ .Environment.CACHE_VERSION }}-{{ checksum "<< parameters.working-directory >>/package.json" }}-{{ checksum "<< parameters.working-directory >>/package-lock.json" }}
          paths:
            - << parameters.working-directory >>/node_modules
      - run:
          name: Test
          command: npm run test
          working_directory: << parameters.working-directory >>

  terraform-plan:
    parameters:
      working-directory:
        type: string
        default: ./infrastructure
    steps:
      - run:
          name: Terraform Plan
          working_directory: << parameters.working-directory >>
          command: |
            terraform init -input=false
            terraform plan

  terraform-apply:
    parameters:
      working-directory:
        type: string
        default: ./infrastructure
    steps:
      - run:
          name: Terraform Apply
          working_directory: << parameters.working-directory >>
          command: |
            terraform apply --auto-approve

jobs:
  dependencies:
    docker:
      - image: cimg/node:18.9.1
    working_directory: backend
    steps:
      - checkout:
          path: ~/project
      - npm-install
  lint:
    docker:
      - image: cimg/node:18.9.1
    working_directory: backend
    steps:
      - checkout:
          path: ~/project
      - lint-check

  test:
    docker:
      - image: cimg/node:18.9.1
    working_directory: backend
    steps:
      - checkout:
          path: ~/project
      - test-check

  release:
    executor:
      name: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "latest,v0.1.${CIRCLE_BUILD_NUM}"
          dockerfile: Dockerfile
          path: backend

  deploy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:latest
    steps:
      - checkout:
          path: ~/project
      - terraform-plan
      - terraform-apply

workflows:
  version: 2
  ci:
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies
      - test:
          requires:
            - lint
      - release:
          requires:
            - test
      - deploy:
          requires:
            - release

